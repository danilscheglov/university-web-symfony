services:
  app:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: university-symfony-app
    volumes:
      - .:/var/www/html
    environment:
      - DB_HOST=${POSTGRES_HOST}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - APP_ENV=${APP_ENV}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    container_name: university-symfony-nginx
    ports:
      - '${APPLICATION_PORT}:80'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./public:/var/www/html/public
    networks:
      - app-network
    depends_on:
      - app

  postgres:
    image: postgres:17-alpine
    container_name: university-symfony-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: university-symfony-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - '${PGADMIN_PORT}:80'
    restart: always
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
